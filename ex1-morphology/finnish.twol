Alphabet

a b c d e f g h i j k l m n o p q r s t u v w x y z ä ö å
a:ä o:ö u:y

I:i  I:e
t:0  t:d

⛒:0
J:0
;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Sets 

Vowel = a o u   ä ö y   e i  I V ;

VowelBack = a o u  ;

VowelFront = ä ö y ;

VowelNeut = e i I;

Cons = b c d f g h j k l m n p q r s t v w x z  J;

NotI = a o u   ä ö y   e   I V b c d f g h j k l m n p q r s t v w x z  ;

VowelNotUOrI = a o ä ö y   e   V;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Rules 

"Remove morpheme boundary"
%>:0 <=> _ ;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! VOWEL HARMONY
!! explanation of fronting in /Finnish-02/
!! version 3: simplify fronting-2b: simpler version of the => rule
"Vowel FRONTING # 3b"
VowelBack:VowelFront /<=  :VowelBack  :* _  ; !! 3b

!! in the <= rule fronting-2a: flip the tapes of the CVnonb:@ symbol 
"Vowel FRONTING # 3a"
VowelBack:VowelFront <=  # [ :VowelFront | :VowelNeut | Cons: ]+ %>:  :* _  ; !! 3a
!!                           * how vowels are REALIZED  ***** consonants could be deleted!


!! ensure that a morpheme boundary has been encountered: 
!! forbid back-to-front changes in the STEM!
"Vowel FRONTING # 1c"
VowelBack:VowelFront  => %>:  :* _  ; !! 1c


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"VOWEL DOUBLING"
V:Vx  <=>  :Vy  %>:  _  ;
      where Vx in ( a e i o u y ä ö )
            Vy in ( a e i o u y ä ö )
      matched ;


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
"Native -i nouns"
I:i  <=>  _  %>:* [ ⛒: | # ] ;

!!!! Double consonant rules

"Gradation tt->t a"     t:0   <=    t:t  _  Vowel %>: Cons  [ Cons | ⛒: | # ] ;
"Gradation tt->t b"     t:0   =>    t _ ;  !! delete only SECOND t
"Gradation tt->t c"     t:t   <=    _ t ;
                                    _         (%>:)   [ ⛒: | # ]  ;
                                    _ Vowel:  (%>:)   [ ⛒: | # ]  ;
                                    _ Vowel:  (%>:)   Vowel:  ;
                                    _ Vowel:  (%>:)   Cons:  Vowel:  ;
                                    s: _  ;    !! never weaken "t" after "s"

"Gradation kk->k: a"    k:0   <=    k _ Vowel %>: Cons [ Cons | ⛒: | # ] ;
"Gradation kk->k: b"    k:0   =>    k _ ;  !! delete only SECOND k
"Gradation kk->k: c"    k:k   <=    _ k: ;   
                                    _ (%>:)   [ ⛒: | # ]  ;
                                    _ Vowel:  (%>:)   [ ⛒: | # ]  ;
                                    _ Vowel:  (%>:)   Vowel:  ;
                                    _ Vowel:  (%>:)   Cons:  Vowel:  ;
                                    s: _  ;    !! never weaken "k" after "s"

"Gradation pp->p: a"         p:0    <=    p:p _ Vowel %>: Cons [Cons | ⛒: | # ] ;
"Gradation pp->p: b"         p:0    =>    p _ ; !! delete only first instance of p
"Gradation pp->p: c"         p:p    <=    _ k: ;
                                          _         (%>:)   [ ⛒:  # ]  ;
                                          _ Vowel:  (%>:)   [ ⛒: | # ]  ;
                                          _ Vowel:  (%>:)   Vowel:  ;
                                          _ Vowel:  (%>:)   Cons:  Vowel:  ;

"Gradation p->v: a"           p:v   <=>   Vowel  _  Vowel %>: Cons  [ Cons | ⛒: | # ] ;
"Gradation t->d: a"           t:d   <=>   [ Vowel | h ] _  Vowel %>: Cons  [ Cons | ⛒: | # ] ;
"Gradation k->0: a"           k:0   <=>   VowelNotUOrI _ VowelNotUOrI %>: Cons [ Cons | ⛒: | # ] ;
"Gradation k->j: a"           k:j   <=>   [ i | J | I ] _ Vowel %>: Cons  [ Cons | ⛒: | # ] ;
"Gradation k->v: a"           k:v   <=>   u _ Vowel %>: Cons  [ Cons | ⛒: | # ] ;
"Gradation [a]ik->j: a"       i:J   <=>   a _ k Vowel %>: Cons  [ Cons | ⛒: | # ] ;
"Gradation [a]ik->j: b"       J:0   <=> Vowel _ j ;       
!aika
!aJka
!aJja
!aja
